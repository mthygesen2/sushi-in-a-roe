{"version":3,"names":[],"mappings":"","sources":["game-state.js"],"sourcesContent":["\"use strict\";\n\n///constructor function of GameState////eventually put in wins\nvar GameState = function GameState(gameDimension) {\n  this.currentPlayer = \"X\";\n  this.gameBoard = [];\n  this.gameDimension = gameDimension;\n  for (var i = 0; i < gameDimension * gameDimension; i++) {\n    this.gameBoard.push(i);\n  }\n};\n\nGameState.prototype.openSpots = function () {\n  var gb = this.gameDimension;\n  return this.gameBoard.filter(function (element) {\n    return element <= gb * gb;\n  });\n};\n\nGameState.prototype.mark = function (index) {\n  this.gameBoard[index] = this.currentPlayer;\n};\nGameState.prototype.changePlayer = function () {\n  if (this.currentPlayer === \"X\") {\n    this.currentPlayer = \"O\";\n  } else {\n    this.currentPlayer = \"X\";\n  }\n};\n\n//////Validates turns to make sure it is numbers 0-8////////////\nGameState.prototype.validTurn = function (answer) {\n  if (!this.gameBoard.hasOwnProperty(answer)) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n/////check it the spot is already taken by a player////////\nGameState.prototype.isTaken = function (answer) {\n  var check = this.gameBoard[answer];\n  if (check === \"O\" || check === \"X\") {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nGameState.prototype.hasCurrentPlayerWon = function () {\n  var p = this.currentPlayer;\n  return this.hasPlayerWon(p);\n};\n\nGameState.prototype.hasPlayerWon = function (p) {\n  var g = this.gameBoard;\n  for (var column = 0; column < this.gameDimension; column += 1) {\n    var columnWin = true;\n    for (var i = column; i < g.length; i += this.gameDimension) {\n      if (g[i] != p) {\n        columnWin = false;\n      }\n    }\n    if (columnWin == true) {\n      return true;\n    }\n  }\n\n  for (var row = 0; row < g.length; row += this.gameDimension) {\n    var rowWin = true;\n    for (var i = row; i < row + this.gameDimension; i += 1) {\n      if (g[i] != p) {\n        rowWin = false;\n      }\n    }\n    if (rowWin == true) {\n      return true;\n    }\n  }\n  /////Diagonal starting at 0 ////\n\n  var d1Win = true;\n  for (var d1 = 0; d1 < g.length; d1 += this.gameDimension + 1) {\n    if (g[d1] != p) {\n      d1Win = false;\n    }\n  }\n  if (d1Win == true) {\n    return true;\n  }\n\n  var d2Win = true;\n  var increment = this.gameDimension - 1;\n  for (var d2 = increment; d2 < g.length - 1; d2 += increment) {\n    if (g[d2] != p) {\n      d2Win = false;\n    }\n  }\n  if (d2Win == true) {\n    return true;\n  }\n\n  ////no one has won yet//////\n  return false;\n};\n\nGameState.prototype.isThereATie = function () {\n  var g = this.gameBoard;\n  for (var tie = 0; tie < g.length; tie += 1) {\n    if (g[tie] != \"X\" && g[tie] != \"O\") {\n      return false;\n    }\n  }\n  var playerXWon = this.hasPlayerWon(\"X\");\n  var playerOWon = this.hasPlayerWon(\"O\");\n\n  return playerXWon != true && playerOWon != true;\n};\n\nif (typeof module != \"undefined\") {\n  module.exports = GameState;\n}"],"file":"game-state.js","sourceRoot":"/source/"}