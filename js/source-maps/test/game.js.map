{"version":3,"names":[],"mappings":"","sources":["test/game.js"],"sourcesContent":["'use strict';\n\nvar expect = require('chai').expect;\nvar GameState = require('../game-state.js');\n\ndescribe('game', function () {\n  describe('validTurn', function () {\n    it('the input will be incorrect', function () {\n      var gs = new GameState();\n      expect(gs.validTurn(9)).to.equal(false);\n    });\n    it('will be a correct input', function () {\n      var gs = new GameState();\n      gs.gameBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n      expect(gs.validTurn(2)).to.equal(true);\n    });\n  });\n  describe('isTaken', function () {\n    it('input will be free to be taken by  player', function () {\n      var gs = new GameState();\n      expect(gs.isTaken(1)).to.equal(false);\n    });\n\n    it('input will taken already', function () {\n      var gs = new GameState();\n      gs.gameBoard[2] = \"X\";\n      expect(gs.isTaken(2)).to.equal(true);\n    });\n  });\n  describe('hasCurrentPlayerWon', function () {\n    it('there will be no winner yet', function () {\n      var gs = new GameState(3);\n      gs.gameBoard = [0, 1, \"X\", \"O\", 4, 5, 6, 7, 8];\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(false);\n    });\n    it('there will be no winner for one selected', function () {\n      var gs = new GameState(3);\n      gs.gameBoard = [\"X\", 1, 2, 3, 4, 5, 6, 7, 8];\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(false);\n    });\n    it('will return true if player has won', function () {\n      var gs = new GameState();\n      gs.gameBoard = [\"X\", \"X\", \"X\", 3, 4, \"O\", \"O\", 7, 8];\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(true);\n    });\n    it('will return false if other player has won', function () {\n      var gs = new GameState(3);\n      gs.gameBoard = [\"X\", \"X\", \"X\", 3, 4, \"O\", \"O\", 7, 8];\n      gs.currentPlayer = \"O\";\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(false);\n    });\n    it('will return true for a 0,3,6 win', function () {\n      var gs = new GameState();\n      gs.gameBoard = [\"X\", 1, \"X\", \"X\", 4, \"O\", \"X\", 7, 8];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(true);\n    });\n    it('will return true for a 1,4,7 win', function () {\n      var gs = new GameState();\n      gs.gameBoard = [0, \"X\", 2, 3, \"X\", \"O\", 6, \"X\", 8];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(true);\n    });\n    it('will return true for a 0,1,2 win', function () {\n      var gs = new GameState();\n      gs.gameBoard = [\"X\", \"X\", \"X\", 3, 4, \"O\", 6, \"X\", 8];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(true);\n    });\n    it('will return true for a 0,4,8 win', function () {\n      var gs = new GameState();\n      gs.gameBoard = [\"X\", 1, 2, 3, \"X\", 5, 6, 7, \"X\"];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(true);\n    });\n    it('will return true for a 2,4,6 win', function () {\n      var gs = new GameState();\n      gs.gameBoard = [0, 1, \"X\", 3, \"X\", 5, \"X\", 7, 8];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon(gs.gameBoard)).to.equal(true);\n    });\n    it('will return true for a 2x2 win 0,1', function () {\n      var gs = new GameState(2);\n      gs.gameBoard = [\"X\", \"X\", 2, 3];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon()).to.equal(true);\n    });\n    it('will return true for a 2x2 win 0,2', function () {\n      var gs = new GameState(2);\n      gs.gameBoard = [\"X\", 1, \"X\", 3];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon()).to.equal(true);\n    });\n    it('will return true for a 2x2 win 1,3', function () {\n      var gs = new GameState(2);\n      gs.gameBoard = [0, \"X\", 2, \"X\"];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon()).to.equal(true);\n    });\n    it('will return false for a 2x2 at only one spot ', function () {\n      var gs = new GameState(2);\n      gs.gameBoard = [0, \"X\", 2, 3];\n      gs.currentPlayer = \"X\";\n      expect(gs.hasCurrentPlayerWon()).to.equal(false);\n    });\n  });\n  describe('isThereATie', function () {\n    it('will not be a tie when the board is not full', function () {\n      var gs = new GameState();\n      gs.gameBoard = [0, \"X\", \"O\", 3, 4, 5, 6, 7, 8];\n      expect(gs.isThereATie(gs.gameBoard)).to.equal(false);\n    });\n    it('will tie the game with board is full', function () {\n      var gs = new GameState(3);\n      gs.gameBoard = [\"O\", \"X\", \"O\", \"X\", \"O\", \"X\", \"X\", \"O\", \"X\"];\n      expect(gs.isThereATie(gs.gameBoard)).to.equal(true);\n    });\n    it('will not be a tie when board is full but X has won', function () {\n      var gs = new GameState();\n      gs.gameBoard = [\"X\", \"X\", \"X\", \"X\", \"O\", \"X\", \"X\", \"O\", \"X\"];\n      expect(gs.isThereATie(gs.gameBoard)).to.equal(false);\n    });\n    it('will not be a tie when board is full but O has won', function () {\n      var gs = new GameState();\n      gs.gameBoard = [\"X\", \"O\", \"O\", \"X\", \"O\", \"X\", \"O\", \"O\", \"X\"];\n      expect(gs.isThereATie(gs.gameBoard)).to.equal(false);\n    });\n  });\n  describe('changePlayer', function () {\n    it('will change the player from X to O', function () {\n      var gs = new GameState();\n      gs.currentPlayer = \"X\";\n      gs.changePlayer();\n      expect(gs.currentPlayer).to.equal(\"O\");\n    });\n    it('will change the player from O to X', function () {\n      var gs = new GameState();\n      gs.currentPlayer = \"O\";\n      gs.changePlayer();\n      expect(gs.currentPlayer).to.equal(\"X\");\n    });\n  });\n  describe('mark', function () {\n    it('will mark the current player', function () {\n      var gs = new GameState();\n\n      gs.mark(0);\n      expect(gs.gameBoard[0]).to.equal(\"X\");\n\n      gs.changePlayer();\n      gs.mark(1);\n      expect(gs.gameBoard[1]).to.equal(\"O\");\n    });\n  });\n  describe('GameState', function () {\n    it('will build a board in GameState', function () {\n      var gs = new GameState(3);\n      expect(gs.gameBoard).to.deep.equal([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n\n      var gs = new GameState(2);\n      expect(gs.gameBoard).to.deep.equal([0, 1, 2, 3]);\n    });\n  });\n});"],"file":"test/game.js","sourceRoot":"/source/"}