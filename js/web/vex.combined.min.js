"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

/*! vex.js, vex.dialog.js 2.2.1 */
(function () {
  var a;a = function a(_a) {
    var b, c;return b = !1, _a(function () {
      var d;return d = (document.body || document.documentElement).style, b = void 0 !== d.animation || void 0 !== d.WebkitAnimation || void 0 !== d.MozAnimation || void 0 !== d.MsAnimation || void 0 !== d.OAnimation, _a(window).bind("keyup.vex", function (a) {
        return 27 === a.keyCode ? c.closeByEscape() : void 0;
      });
    }), c = { globalID: 1, animationEndEvent: "animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend", baseClassNames: { vex: "vex", content: "vex-content", overlay: "vex-overlay", close: "vex-close", closing: "vex-closing", open: "vex-open" }, defaultOptions: { content: "", showCloseButton: !0, escapeButtonCloses: !0, overlayClosesOnClick: !0, appendLocation: "body", className: "", css: {}, overlayClassName: "", overlayCSS: {}, contentClassName: "", contentCSS: {}, closeClassName: "", closeCSS: {} }, open: function open(b) {
        return b = _a.extend({}, c.defaultOptions, b), b.id = c.globalID, c.globalID += 1, b.$vex = _a("<div>").addClass(c.baseClassNames.vex).addClass(b.className).css(b.css).data({ vex: b }), b.$vexOverlay = _a("<div>").addClass(c.baseClassNames.overlay).addClass(b.overlayClassName).css(b.overlayCSS).data({ vex: b }), b.overlayClosesOnClick && b.$vexOverlay.bind("click.vex", function (b) {
          return b.target === this ? c.close(_a(this).data().vex.id) : void 0;
        }), b.$vex.append(b.$vexOverlay), b.$vexContent = _a("<div>").addClass(c.baseClassNames.content).addClass(b.contentClassName).css(b.contentCSS).append(b.content).data({ vex: b }), b.$vex.append(b.$vexContent), b.showCloseButton && (b.$closeButton = _a("<div>").addClass(c.baseClassNames.close).addClass(b.closeClassName).css(b.closeCSS).data({ vex: b }).bind("click.vex", function () {
          return c.close(_a(this).data().vex.id);
        }), b.$vexContent.append(b.$closeButton)), _a(b.appendLocation).append(b.$vex), c.setupBodyClassName(b.$vex), b.afterOpen && b.afterOpen(b.$vexContent, b), setTimeout(function () {
          return b.$vexContent.trigger("vexOpen", b);
        }, 0), b.$vexContent;
      }, getAllVexes: function getAllVexes() {
        return _a("." + c.baseClassNames.vex + ':not(".' + c.baseClassNames.closing + '") .' + c.baseClassNames.content);
      }, getVexByID: function getVexByID(b) {
        return c.getAllVexes().filter(function () {
          return _a(this).data().vex.id === b;
        });
      }, close: function close(a) {
        var b;if (!a) {
          if (b = c.getAllVexes().last(), !b.length) return !1;a = b.data().vex.id;
        }return c.closeByID(a);
      }, closeAll: function closeAll() {
        var b;return b = c.getAllVexes().map(function () {
          return _a(this).data().vex.id;
        }).toArray(), (null != b ? b.length : void 0) ? (_a.each(b.reverse(), function (a, b) {
          return c.closeByID(b);
        }), !0) : !1;
      }, closeByID: function closeByID(d) {
        var e, f, g, h, i;return f = c.getVexByID(d), f.length ? (e = f.data().vex.$vex, i = _a.extend({}, f.data().vex), g = function g() {
          return i.beforeClose ? i.beforeClose(f, i) : void 0;
        }, h = function h() {
          return f.trigger("vexClose", i), e.remove(), _a("body").trigger("vexAfterClose", i), i.afterClose ? i.afterClose(f, i) : void 0;
        }, b ? (g(), e.unbind(c.animationEndEvent).bind(c.animationEndEvent, function () {
          return h();
        }).addClass(c.baseClassNames.closing)) : (g(), h()), !0) : void 0;
      }, closeByEscape: function closeByEscape() {
        var b, d, e;return e = c.getAllVexes().map(function () {
          return _a(this).data().vex.id;
        }).toArray(), (null != e ? e.length : void 0) ? (d = Math.max.apply(Math, e), b = c.getVexByID(d), b.data().vex.escapeButtonCloses !== !0 ? !1 : c.closeByID(d)) : !1;
      }, setupBodyClassName: function setupBodyClassName() {
        return _a("body").bind("vexOpen.vex", function () {
          return _a("body").addClass(c.baseClassNames.open);
        }).bind("vexAfterClose.vex", function () {
          return c.getAllVexes().length ? void 0 : _a("body").removeClass(c.baseClassNames.open);
        });
      }, hideLoading: function hideLoading() {
        return _a(".vex-loading-spinner").remove();
      }, showLoading: function showLoading() {
        return c.hideLoading(), _a("body").append('<div class="vex-loading-spinner ' + c.defaultOptions.className + '"></div>');
      } };
  }, "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = a(require("jquery")) : window.vex = a(jQuery);
}).call(undefined), function () {
  var a;a = function a(_a2, b) {
    var c, d;return null == b ? _a2.error("Vex is required to use vex.dialog") : (c = function c(b) {
      var c;return c = {}, _a2.each(b.serializeArray(), function () {
        return c[this.name] ? (c[this.name].push || (c[this.name] = [c[this.name]]), c[this.name].push(this.value || "")) : c[this.name] = this.value || "";
      }), c;
    }, d = {}, d.buttons = { YES: { text: "OK", type: "submit", className: "vex-dialog-button-primary" }, NO: { text: "Cancel", type: "button", className: "vex-dialog-button-secondary", click: function click(a) {
          return a.data().vex.value = !1, b.close(a.data().vex.id);
        } } }, d.defaultOptions = { callback: function callback() {}, afterOpen: function afterOpen() {}, message: "Message", input: '<input name="vex" type="hidden" value="_vex-empty-value" />', value: !1, buttons: [d.buttons.YES, d.buttons.NO], showCloseButton: !1, onSubmit: function onSubmit(e) {
        var f, g;return f = _a2(this), g = f.parent(), e.preventDefault(), e.stopPropagation(), g.data().vex.value = d.getFormValueOnSubmit(c(f)), b.close(g.data().vex.id);
      }, focusFirstInput: !0 }, d.defaultAlertOptions = { message: "Alert", buttons: [d.buttons.YES] }, d.defaultConfirmOptions = { message: "Confirm" }, d.open = function (c) {
      var e;return c = _a2.extend({}, b.defaultOptions, d.defaultOptions, c), c.content = d.buildDialogForm(c), c.beforeClose = function (a) {
        return c.callback(a.data().vex.value);
      }, e = b.open(c), c.focusFirstInput && e.find('input[type="submit"], textarea, input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="email"], input[type="month"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="time"], input[type="url"], input[type="week"]').first().focus(), e;
    }, d.alert = function (b) {
      return "string" == typeof b && (b = { message: b }), b = _a2.extend({}, d.defaultAlertOptions, b), d.open(b);
    }, d.confirm = function (b) {
      return "string" == typeof b ? _a2.error("dialog.confirm(options) requires options.callback.") : (b = _a2.extend({}, d.defaultConfirmOptions, b), d.open(b));
    }, d.prompt = function (b) {
      var c;return "string" == typeof b ? _a2.error("dialog.prompt(options) requires options.callback.") : (c = { message: '<label for="vex">' + (b.label || "Prompt:") + "</label>", input: '<input name="vex" type="text" class="vex-dialog-prompt-input" placeholder="' + (b.placeholder || "") + '"  value="' + (b.value || "") + '" />' }, b = _a2.extend({}, c, b), d.open(b));
    }, d.buildDialogForm = function (b) {
      var c, e, f;return c = _a2('<form class="vex-dialog-form" />'), f = _a2('<div class="vex-dialog-message" />'), e = _a2('<div class="vex-dialog-input" />'), c.append(f.append(b.message)).append(e.append(b.input)).append(d.buttonsToDOM(b.buttons)).bind("submit.vex", b.onSubmit), c;
    }, d.getFormValueOnSubmit = function (a) {
      return a.vex || "" === a.vex ? "_vex-empty-value" === a.vex ? !0 : a.vex : a;
    }, d.buttonsToDOM = function (c) {
      var d;return d = _a2('<div class="vex-dialog-buttons" />'), _a2.each(c, function (e, f) {
        var g;return g = _a2('<input type="' + f.type + '" />').val(f.text).addClass(f.className + " vex-dialog-button " + (0 === e ? "vex-first " : "") + (e === c.length - 1 ? "vex-last " : "")).bind("click.vex", function (c) {
          return f.click ? f.click(_a2(this).parents("." + b.baseClassNames.content), c) : void 0;
        }), g.appendTo(d);
      }), d;
    }, d);
  }, "function" == typeof define && define.amd ? define(["jquery", "vex"], a) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = a(require("jquery"), require("vex")) : window.vex.dialog = a(window.jQuery, window.vex);
}.call(undefined);
//# sourceMappingURL=../source-maps/web/vex.combined.min.js.map
